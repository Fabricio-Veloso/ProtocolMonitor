@page "/"
@using System.Threading.Tasks
@using System.Text.Json
@inject WebSocketService WebSocketService
@using MyBlazorPwa
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager

@inject IJSRuntime JSRuntime
<h1 class="title">Protocol Monitor</h1>
<!--<h2>Tempo restante para a próxima atualização: @timeRemaining.Minutes:@timeRemaining.Seconds</h2>-->

<p>@timeRemaining</p>

@if (isLoading)
{
  <div class="fade-in">
    <div class="loader"></div> <span>Adicionando novo protocolo</span>
  </div>
}
@if(isLoading = false){
  <div class="fade-out">
    <div class="loader"></div>
  </div>
}
@if (isConnecting)
{
  <div class="fade-in">
    <div class="loader"></div> <span>Estabelecendo conexão com o back-end local</span>
  </div>
}
else if (isConnected && !hasConnectionMessageDisappeared)
{
  <div class="fade-out"> <span>Conexão estabelecida!</span>
  </div>
}

<div>
  <form id="textForm" @onsubmit="RequestProtocolData" style="margin-bottom: 20px;">
    <input type="text" id="userInput" @bind="userInput" name="userInput" placeholder="Número do protocolo" class="input-field">
    <button type="submit" class="button">Adicionar Protocolo</button>
  </form>
  <DropDown OnSectorChange="BySectorRequestMiniProtocolData"/> 
</div>

<button @onclick="ShowConfigModal" class="button">Configurações</button>

@if (isConfigModalVisible)
{
    <div class="modal">
        <div class="modal-content">
            <span class="close-button" @onclick="HideConfigModal">&times;</span>
            <h3>Configurações de Acompanhamento</h3>
            
            <label for="expectativa">Expectativa de tempo para movimentação (em dias):</label>
            <input type="number" id="expectativa" @bind="colorConfig.ConfigExpectativaMovimentacao" />

            <label for="amarelo">Limite para amarelo (dias):</label>
            <input type="number" id="amarelo" @bind="colorConfig.ConfigAmarelo" />

            <label for="vermelho">Limite para vermelho (dias):</label>
            <input type="number" id="vermelho" @bind="colorConfig.ConfigVermelho" />

            <button class="button" @onclick="SaveConfigurations">Salvar</button>
            <button class="button" @onclick="LimparProtocolos">Resetar base de dados</button>
        </div>
    </div>
}

@if (protocols.Any() || miniprotocols.Any()) // Verifica se há protocolos na lista
{
  <div class="fade-in">
    <ProtocolGrid protocolsList="@protocols" miniprotocolsList="@miniprotocols" Config="@colorConfig" />
  </div>
}

<!--
@if (miniprotocols.Any())
{
  // Chame um método para atualizar a lista quando a lista de mini protocolos não estiver vazia
  await async UpdateProtocols();
}
-->

<!--
expectedMoveDate =@expectativaMovimentacao currentDate =@dataAtual 
@if (miniprotocols.Any()) // Verifica se há protocolos na lista
{
  <div class="fade-in">
    <MiniProtocolVisualizer miniprotocolsList="@miniprotocols" expectedMoveDate = "@expectativaMovimentacao" currentDate = "@dataAtual" />
  </div>
}
-->

@if (ProtocolRequestStatus != true)
{
  <h4>Ocorreu um erro ao requisitar um novo protocolo</h4>
}
@if (!protocols.Any() && !miniprotocols.Any())
{
  <p>Não há protocolos salvos. Por favor pesquise Novos protocolos</p>
}

@code {
  private DateTime expectativaMovimentacao = DateTime.Now.AddDays(3);
  private DateTime dataAtual = DateTime.Now;
  private bool ProtocolRequestStatus = true;
  private string? userInput;
  private bool isLoading = false; // Começar sem loading
  private bool isConnecting = true;
  private bool isConnected = false; // Estado para conexão
  private bool hasConnectionMessageDisappeared = false; // Estado para controle de mensagem
  private string? receivedMessage;
  
  private ProtocolData protocolInstance = new ProtocolData();
  private List<ProtocolData> protocols = new List<ProtocolData>();
  
  private MiniProtocolData miniProtocolInstance = new MiniProtocolData();
  private List<MiniProtocolData> miniprotocols = new List<MiniProtocolData>();
  
  private TimeSpan timeRemaining = TimeSpan.FromMinutes(5); // Timer inicial de 5 minutos
  private string? selectedSector; // Setor selecionado
  private bool isConfigModalVisible = false;
  private bool startCheck = false;
  
  private bool isUpdating = false;
  
  // Nova instância da classe ByTimeColorConfig
  private ByTimeColorConfig colorConfig = new ByTimeColorConfig();
  
  private System.Timers.Timer timer; // Timer do sistema
  
  private async Task UpdateProtocols()
  {
    // Verifica se miniprotocols é nulo ou está vazio
    if (miniprotocols != null && miniprotocols.Any())
    {
      List<string> listaProtocolosPesquisar = miniprotocols.Select(mp => mp.Numero).ToList();
      await UpdateGridWithFullProtocolsAsync(listaProtocolosPesquisar);
    }
    else
    {
      // Corrigido para usar Console.WriteLine
      Console.WriteLine("Ocorreu um erro ao tentar listar os números dos mini protocolos");
    }
  }

  private async Task  UpdateProtocolsMoves(List<ProtocolData> protocols)
  {
    // Indica que a requisição de protocolos está ativa
    isUpdating = true;
    ProtocolRequestStatus = true;
    isLoading = true;
    receivedMessage = null;
    StateHasChanged();

    // Cria uma lista de números de protocolos a serem enviados
    var protocolList = protocols.Select(p => p.Header.Numero).ToList();

      var lastMovesTimeList = protocols.Select(p => {
      var lastMove = p.Moves.LastOrDefault()?.Hora ?? "Sem hora";
      return string.IsNullOrEmpty(lastMove) ? "Sem hora" : lastMove;
    }).ToList();

    // Cria a string de horas separadas por vírgulas
    var lastMovesTime = string.Join(",", lastMovesTimeList);

    // Envia a lista de protocolos e a lista de últimas horas para o backend
    await WebSocketService.SendAsync("CheckForProtocolUpdate" + ' ' + string.Join(",", protocolList) + " " + lastMovesTime);
      
    // Aguarda a resposta do backend para saber quantos protocolos serão atualizados
    string response = await WebSocketService.ReceiveAsync();
   
    if (int.TryParse(response, out int totalProtocols)  && totalProtocols > 0)
    {
      // Variável para controlar quantos protocolos foram processados
      int processedProtocols = 0;

      // Continua recebendo mensagens até que todas as respostas tenham sido recebidas
      while (processedProtocols < totalProtocols)
      {
        receivedMessage = await WebSocketService.ReceiveAsync();

        if (!string.IsNullOrEmpty(receivedMessage))
        {
          Console.WriteLine($"Dados do protocolo {processedProtocols + 1} de {totalProtocols} recebidos do backend Node");

          // Cria uma nova instância de ProtocolData para cada novo protocolo recebido
          var newProtocolInstance = new ProtocolData();
          ProtocolLoader.PD_FromJson(receivedMessage, ref newProtocolInstance);
          ProtocolLoader.IdentifySponsor(ref newProtocolInstance);

          // Substitui o protocolo existente, se houver
          var existingProtocol = protocols.FirstOrDefault(p => p.Header.Numero == newProtocolInstance.Header.Numero);
          if (existingProtocol != null)
          {
            // Remove o protocolo antigo
            protocols.Remove(existingProtocol);
          }

          // Adiciona o novo protocolo
          protocols.Add(newProtocolInstance);
          
          // Atualiza o Local Storage com a lista atualizada de protocolos
          await localStorage.SetItemAsync("protocols", protocols); // Salva a lista no Local Storage

          // Atualiza a interface de usuário a cada nova mensagem recebida
          StateHasChanged();

          // Incrementa a quantidade de protocolos processados
          processedProtocols++;
        }
      }
    }else if (int.TryParse(response, out int totalProtocolss)  && totalProtocolss <= 0)
    {
      Console.WriteLine("Não há Protocolos para serem atualizados");
    }
  
    // Certifique-se de que o estado de carregamento seja encerrado
    
    isLoading = false;
    ProtocolRequestStatus = false;
    StateHasChanged();
    isUpdating = false;
  }

  private async Task StartTimer()
  {
    while (timeRemaining.TotalSeconds > 0)
    {
      await Task.Delay(1000); // Espera 1 segundo
      timeRemaining = timeRemaining.Subtract(TimeSpan.FromSeconds(1));
      StateHasChanged();
    }
    
    if(isUpdating == false && isLoading == false && protocols.Any()){
     // Quando o tempo acabar, realize a pesquisa de mini protocolos
      await UpdateProtocolsMoves(protocols);
    }else{
      Console.WriteLine("Os protoclos estão sendo atualizados, não realizar aa tualização periódica agora");
      
    }
   
    
    // Reinicie o timer para 5 minutos
    timeRemaining = TimeSpan.FromMinutes(5);
    StateHasChanged();
    StartTimer();
    Console.WriteLine("Timer iniciado novamente");
  }

  private void OnSectorChange(string sector)
  {
    selectedSector = sector; // Armazena o setor selecionado
  }
  
  private void ShowConfigModal()
  {
    isConfigModalVisible = true;
    StateHasChanged();
  }

  private void HideConfigModal()
  {
    isConfigModalVisible = false;
    StateHasChanged();
  }

  private async void SaveConfigurations()
  {
    // Salve a instância da classe ByTimeColorConfig no Local Storage
    await localStorage.SetItemAsync("colorConfig", colorConfig);

    // Atualize a expectativa de movimentação com base na configuração salva
    expectativaMovimentacao = DateTime.Now.AddDays(colorConfig.ConfigExpectativaMovimentacao ?? 0);
    HideConfigModal();
  }
  
   private async Task LimparProtocolos()
    {
        // Remove as chaves 'protocols' e 'miniprotocols' do local storage
        await localStorage.RemoveItemAsync("protocols");
        await localStorage.RemoveItemAsync("miniprotocols");
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
    }

  private async Task ConnectWebSocket() {
    await WebSocketService.ConnectAsync();
  }

  private async Task RequestProtocolData() {
    ProtocolRequestStatus = true;
    isLoading = true;
    receivedMessage = null;
    StateHasChanged();
  
    await WebSocketService.SendAsync("ProtocolScrape " + userInput);
    receivedMessage = await WebSocketService.ReceiveAsync();
  
    if (!string.IsNullOrEmpty(receivedMessage)) {
      Console.WriteLine("Dados de protocolo enviado - Mensagem Recebida do Back-end Node");
  
      // Crie uma nova instância de ProtocolData para cada novo protocolo recebido
      var newProtocolInstance = new ProtocolData();
      ProtocolLoader.PD_FromJson(receivedMessage, ref newProtocolInstance);
      ProtocolLoader.IdentifySponsor(ref newProtocolInstance);
      // Verifique se o protocolo já existe antes de adicionar
      if (!protocols.Any(p => p.Header.Numero == newProtocolInstance.Header.Numero)) {
        protocols.Add(newProtocolInstance);
        AtualizarListaMiniProtocolos(ref protocols, ref miniprotocols);
        StateHasChanged();
        await localStorage.SetItemAsync("protocols", protocols); // Salve a lista no Local Storage
      }
    }
  
    isLoading = false; // Certifique-se de que o estado de carregamento seja encerrado
    StateHasChanged();
  }

  public void AtualizarListaMiniProtocolos(ref List<ProtocolData> listaProtocolos, ref List<MiniProtocolData> listaMiniProtocolos)
  {
    // Para cada protocolo completo
    foreach (var protocolo in listaProtocolos)
    {
        // Encontra o miniprotocolo correspondente, se existir
        var miniProtocoloCorrespondente = listaMiniProtocolos
            .FirstOrDefault(mini => mini.Numero == protocolo.Header.Numero);

        // Se houver correspondência, remove o miniprotocolo
        if (miniProtocoloCorrespondente != null)
        {
            listaMiniProtocolos.Remove(miniProtocoloCorrespondente);
            AtualizarLocalStorage(listaMiniProtocolos);
            StateHasChanged();
        }
    }
  }

  private async Task UpdateGridWithFullProtocolsAsync(List<string> protocolList){
    ProtocolRequestStatus = true;
    isLoading = true;
    receivedMessage = null;
    StateHasChanged();

    // Envia a lista de protocolos para o backend
    await WebSocketService.SendAsync("UpdateGridWithFullProtocols " + string.Join(",", protocolList));

    // Variável para controlar quantos protocolos foram processados
    int processedProtocols = 0;
    int totalProtocols = protocolList.Count;

    // Continua recebendo mensagens até que todas as respostas tenham sido recebidas
    while (processedProtocols < totalProtocols) {
      receivedMessage = await WebSocketService.ReceiveAsync();

      if (!string.IsNullOrEmpty(receivedMessage)) {
        Console.WriteLine($"Dados do protocolo {processedProtocols + 1} de {totalProtocols} recebidos do backend Node");

        // Cria uma nova instância de ProtocolData para cada novo protocolo recebido
        var newProtocolInstance = new ProtocolData();
        ProtocolLoader.PD_FromJson(receivedMessage, ref newProtocolInstance);
        ProtocolLoader.IdentifySponsor(ref newProtocolInstance);
        // Verifica se o protocolo já existe antes de adicionar
        if (!protocols.Any(p => p.Header.Numero == newProtocolInstance.Header.Numero)) {
          protocols.Add(newProtocolInstance);
          AtualizarListaMiniProtocolos(ref protocols, ref miniprotocols);
          StateHasChanged();
          await localStorage.SetItemAsync("protocols", protocols); // Salva a lista no Local Storage
        }

        // Atualiza a interface de usuário a cada nova mensagem recebida
        StateHasChanged();

        // Incrementa a quantidade de protocolos processados
        processedProtocols++;
      }
    }

    isLoading = false; // Certifique-se de que o estado de carregamento seja encerrado
    ProtocolRequestStatus = false;
    StateHasChanged();
    Console.WriteLine("Todos os MiniProtocolos foram subistituídos por Protocolos completos, iniciando Timer para atualizações periódicas");
    if(isUpdating == false){
    await StartTimer();
    }
    
  }
  
  private async Task BySectorRequestMiniProtocolData(string sector) {
    ProtocolRequestStatus = true;
    isLoading = true;
    receivedMessage = null;
    StateHasChanged();
  
    await WebSocketService.SendAsync("BySectorMiniProtocolsScrape " + sector);
    receivedMessage = await WebSocketService.ReceiveAsync();
  
    if (!string.IsNullOrEmpty(receivedMessage)) {
      Console.WriteLine(" Resultado da busca por miniprotocolos, enviada - Mensagem Recebida do Back-end Node");
  
      // Crie uma nova instância de ProtocolData para cada novo protocolo recebido
      var newMiniProtocolList = new List<MiniProtocolData>();
      ProtocolLoader.MiniPD_FromJson(receivedMessage, ref newMiniProtocolList);
  
      // Verifique se o protocolo já existe antes de adicionar
      foreach(MiniProtocolData miniProtocol in newMiniProtocolList){
        if (!miniprotocols.Any(p => p.Numero == miniProtocol.Numero)) {
        miniprotocols.Add(miniProtocol);
        // Salve a lista no Local Storage
      }
    }
    await localStorage.SetItemAsync("miniprotocols", miniprotocols); 
  }

  isLoading = false; // Certifique-se de que o estado de carregamento seja encerrado
  await UpdateProtocols();
  StateHasChanged();
  }

  private async Task TryConnectWebSocket() {
    while (!isConnected) {
      isConnecting = true; // Mostrar loader
      StateHasChanged();
      try {
        await ConnectWebSocket();
        isConnected = true; // Definir como conectado
        isConnecting = false; // Remover loader
        await ShowConnectionMessage(); // Mostrar a mensagem de conexão
      } catch (Exception) {
        // Se falhar, espere um pouco antes de tentar novamente
        await Task.Delay(2000);
      }
    }
  }

  private async Task ShowConnectionMessage() {
    await Task.Delay(500); // Esperar um pouco antes de mostrar a mensagem
    hasConnectionMessageDisappeared = false;
    StateHasChanged();
    await Task.Delay(2000); // Tempo da mensagem de conexão
    hasConnectionMessageDisappeared = true;
    StateHasChanged();
  }

  protected override async Task OnInitializedAsync() {
    
    var savedProtocols = await localStorage.GetItemAsync<List<ProtocolData>>("protocols");
    if(savedProtocols != null){
      protocols = savedProtocols;
    }
    
    var savedMiniProtocols = await localStorage.GetItemAsync<List<MiniProtocolData>>("miniprotocols");
    if (savedMiniProtocols != null) {
      miniprotocols = savedMiniProtocols; // Carregue protocolos salvos
    }
    
    var savedConfig = await localStorage.GetItemAsync<ByTimeColorConfig>("colorConfig");
    if (savedConfig != null)
    {
      colorConfig = savedConfig;
      expectativaMovimentacao = DateTime.Now.AddDays(colorConfig.ConfigExpectativaMovimentacao ?? 0);
    }
    
    await TryConnectWebSocket();
    
   
    await UpdateProtocols();
    
    StartTimer();
    
    
    
    
  }

  private async Task AtualizarLocalStorage(List<MiniProtocolData> listaMiniProtocolos){
  await localStorage.SetItemAsync("miniprotocols", miniprotocols); 
  }


}
