@page "/protocols"
@using System.Threading.Tasks
@using System.Text.Json
@inject WebSocketService WebSocketService
@using MyBlazorPwa


<h3>WebSocket Example</h3>
<button @onclick="ConnectWebSocket">Connect</button>

<form id="textForm" @onsubmit="RequestProtocolData">
  <label for="userInput">Insira seu texto:</label>
  <input type="text" id="userInput" @bind="userInput" name="userInput">
  <button type="submit">Enviar</button>
</form>


<PageTitle>Protocolos</PageTitle>


<h1>Visualização de Protocolos</h1>

@if (isLoading)
{
  <p>Carregando...</p>
}
else if (ProtocolRequestStatus != true)
{
  <h4>Ocorreu um erro ao requisitar um novo protocolo</h4>
}
else if (!string.IsNullOrEmpty(receivedMessage))
{
  <ProtocolVisualizer protocolsList="@protocols" />
}

@code{
  private bool ProtocolRequestStatus = true;
  private string? userInput;
  private bool isLoading = false;
  private string? receivedMessage;
  private string? receivedData;
  private ProtocolData protocolInstance = new ProtocolData();
  private List<ProtocolData> protocols = new List<ProtocolData>();
  
  /*
  private async  await Task<List<ProtocolData>> LoadProtocols()
  {
      // Lógica para carregar protocolos (por exemplo, de um arquivo JSON ou de um banco de dados)
      return new List<ProtocolData>(); // Retornar uma lista de ProtocolData preenchida
  }
*/
  private async Task ConnectWebSocket()
  {
      await WebSocketService.ConnectAsync();
  }

 private async Task RequestProtocolData()
{
  ProtocolRequestStatus = true;
  isLoading = true;
  receivedMessage = null;
  StateHasChanged();

  await WebSocketService.SendAsync("ProtocolScrape " + userInput);
  receivedMessage = await WebSocketService.ReceiveAsync();
    
  if (!string.IsNullOrEmpty(receivedMessage))
  {
    Console.WriteLine("Mensagem Recebida do Back-end Node");
    protocols.Add(ProtocolLoader.FromJson(receivedMessage));
    
  
  }
  isLoading = false;
  StateHasChanged();
}

  private async Task ReceiveMessage()
  {
      receivedMessage = await WebSocketService.ReceiveAsync();

      // Parse JSON if needed
      if (!string.IsNullOrEmpty(receivedMessage))
      {
          try
          {
              receivedData = receivedMessage;
          }
          catch
          {
              receivedData = "Erro ao processar os dados recebidos.";
          }
      }
  }
  
  /*protected override async  Task OnInitializedAsync()
  {
    //protocols = await LoadProtocols(); // Carrega protocolos de algum lugar, como um serviço ou arquivo
  }
  */

}

