@page "/protocols"
@using System.Threading.Tasks
@using System.Text.Json
@inject WebSocketService WebSocketService
@using MyBlazorPwa
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime

<h3>WebSocket Example</h3>
<button @onclick="ConnectWebSocket">Connect</button>

<form id="textForm" @onsubmit="RequestProtocolData">
  <label for="userInput">Insira seu texto:</label>
  <input type="text" id="userInput" @bind="userInput" name="userInput" placeholder="200248809">
  <button type="submit">Enviar</button>
</form>

<PageTitle>Protocolos</PageTitle>

<h1>Visualização de Protocolos</h1>

@if (isLoading)
{
    <p>Carregando...</p>
}
else if (ProtocolRequestStatus != true)
{
    <h4>Ocorreu um erro ao requisitar um novo protocolo</h4>
}
else if (protocols.Any()) // Verifica se há protocolos na lista
{
    <ProtocolVisualizer protocolsList="@protocols" />
}
else
{
    <p>Não há protocolos salvos. Por favor pesquise Novos protocolos</p> // Mensagem caso não haja protocolos
}

@code {
    private bool ProtocolRequestStatus = true;
    private string? userInput;
    private bool isLoading = false;
    private string? receivedMessage;
    private string? receivedData;
    private ProtocolData protocolInstance = new ProtocolData();
    private List<ProtocolData> protocols = new List<ProtocolData>();

    private async Task ConnectWebSocket()
    {
        await WebSocketService.ConnectAsync();
    }

    private async Task RequestProtocolData()
    {
        ProtocolRequestStatus = true;
        isLoading = true;
        receivedMessage = null;
        StateHasChanged();

        await WebSocketService.SendAsync("ProtocolScrape " + userInput);
        receivedMessage = await WebSocketService.ReceiveAsync();
        
        if (!string.IsNullOrEmpty(receivedMessage))
        {
            Console.WriteLine("Mensagem Recebida do Back-end Node");
            ProtocolLoader.FromJson(receivedMessage, ref protocolInstance);
            
            // Verifique se o protocolo já existe antes de adicionar
            if (!protocols.Any(p => p.Header.Numero == protocolInstance.Header.Numero)) // Supondo que `Id` é uma propriedade única
            {
                protocols.Add(protocolInstance);
                await localStorage.SetItemAsync("protocols", protocols); // Salve a lista no Local Storage
            }
        }
        isLoading = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var savedProtocols = await localStorage.GetItemAsync<List<ProtocolData>>("protocols");
        
        if (savedProtocols != null)
        {
            protocols = savedProtocols; // Carregue protocolos salvos
        }
    }
}
