@using MyBlazorPwa

<div class="miniprotocol-visualizer">
    @if (miniprotocolsList != null && miniprotocolsList.Any())
    {
        @foreach (var protocol in miniprotocolsList)
        {
            <div class="miniprotocol-card @(GetColorClass(protocol.DataUltimoMovimento))">
                @{
                    
                    var numero = protocol.Numero;
                    var assunto = protocol.Assunto;
                    var dataUltimoMovimento = protocol.DataUltimoMovimento;
                    var horaUltimoMovimento = protocol.HoraUltimoMovimento;
                    var localizacaoAtual = protocol.LocalizacaoAtual;
                    var descricao = protocol.Descricao;

                   
                    bool isNumeroVazio = string.IsNullOrWhiteSpace(numero) || numero == "Vazio";
                    bool isAssuntoVazio = string.IsNullOrWhiteSpace(assunto) || assunto == "Vazio";
                    bool isDescricaoVazia = string.IsNullOrWhiteSpace(descricao) || descricao == "Vazio";
                    bool isDataUltimoMovimentoVazia = string.IsNullOrWhiteSpace(dataUltimoMovimento) || dataUltimoMovimento == "Vazio";
                    bool isHoraUltimoMovimentoVazia = string.IsNullOrWhiteSpace(horaUltimoMovimento) || horaUltimoMovimento == "Vazio";
                    bool isLocalizacaoAtualVazia = string.IsNullOrWhiteSpace(localizacaoAtual) || localizacaoAtual == "Vazio";

                    
                    bool todosVazios = isNumeroVazio && isAssuntoVazio && isDescricaoVazia && isDataUltimoMovimentoVazia && isHoraUltimoMovimentoVazia && isLocalizacaoAtualVazia;
                }

                
                @if (!todosVazios)
                {
                    @if ((!isAssuntoVazio && !isDescricaoVazia) && (!isLocalizacaoAtualVazia))
                    {
                      <p><strong>@descricao</strong> Atualmente em: @localizacaoAtual Desde: @dataUltimoMovimento @horaUltimoMovimento</p>
                    }
                    else if ((!isAssuntoVazio && !isNumeroVazio) && (!isLocalizacaoAtualVazia))
                    {
                      <h3><strong>@assunto</strong> @numero</h3>
                      <h6>Atualmente em: @localizacaoAtual</h6>
                      <p>Desde: @dataUltimoMovimento @horaUltimoMovimento</p>
                  }
                    else if (!isNumeroVazio && (!isLocalizacaoAtualVazia))
                    {
                      <h3>@numero</h3>
                      <h6>Atualmente em: @localizacaoAtual</h6>
                      <p>Desde: @dataUltimoMovimento @horaUltimoMovimento</p>
                    }
                    else
                    {
                        <h3>Protocolo sem identificadores</h3>
                        <h6>Atualmente em: @localizacaoAtual</h6>
                        <p>Desde: @dataUltimoMovimento @horaUltimoMovimento</p>
                    }
                }
                else
                {
                    <h3>MiniProtocolo sem informações disponíveis</h3>
                }
            </div>
        }
    }
    else
    {
        <p>Nenhum protocolo encontrado.</p>
    }
</div>


@code {
    [Parameter]
    public List<MiniProtocolData> miniprotocolsList { get; set; } = new List<MiniProtocolData>();

    [Parameter]
    public DateTime expectedMoveDate { get; set; }  

    [Parameter]
    public DateTime currentDate { get; set; } 

    private string GetColorClass(string dataUltimoMovimento)
    {
        if (DateTime.TryParse(dataUltimoMovimento, out var lastMoveDate))
        {
            var daysDifference = (currentDate - lastMoveDate).TotalDays;

            if (daysDifference <= 3)
            {
                return "green";
            }
            else if (daysDifference <= 2)
            {
                return "yellow";
            }
            else if (daysDifference <= 1)
            {
                return "red";
            }
            else
            {
                return "red";
            }
        }
        return string.Empty;
    }

}