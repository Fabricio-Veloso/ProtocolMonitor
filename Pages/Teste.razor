@page "/teste"
@inherits LayoutComponentBase

@using System.Threading.Tasks
@using System.Text.Json
@using MyBlazorPwa

@inject WebSocketService WebSocketService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<MudAppBar Fixed="true" Bottom="false" Color="Color.Primary"  >
    <MudText  Typo="Typo.h6" >Monitor De Protocolos</MudText>
</MudAppBar>

<MudChip T="string" Color="Color.Info" Size="Size.Large"> @timeRemaining</MudChip>

@if (isLoading)
{
  <MudText  Typo="Typo.h6" >Carregando</MudText>
  <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}

@if (isConnecting)
{
  <MudText  Typo="Typo.h6" >Estabelecendo conexão com o back-end local</MudText>
  <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenModal">Abrir Gráfico</MudButton>

<MudDialog @bind-IsVisible="ischartModalVisible" MaxWidth="500px" FullWidth="true" CloseOnEscape="true">
    <DialogContent>
        <MudPaper Class="pa-4">
            <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="selectedIndex" InputData="@mediasHoras" InputLabels="@setores.ToArray()"></MudChart>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseModal" Color="Color.Secondary">Fechar</MudButton>
    </DialogActions>
</MudDialog>

<MudForm>
</MudForm>

 


@code {
  private DateTime expectativaMovimentacao = DateTime.Now.AddDays(3);
  private DateTime dataAtual = DateTime.Now;
  private bool ProtocolRequestStatus = true;
  private string? userInput;
  private bool isLoading = false; // Começar sem loading
  private bool isConnecting = true;
  private bool isConnected = false; // Estado para conexão
  private bool hasConnectionMessageDisappeared = false; // Estado para controle de mensagem
  private string? receivedMessage;
  
  private ProtocolData protocolInstance = new ProtocolData();
  private List<ProtocolData> protocols = new List<ProtocolData>();
  
  private MiniProtocolData miniProtocolInstance = new MiniProtocolData();
  private List<MiniProtocolData> miniprotocols = new List<MiniProtocolData>();
  
  private TimeSpan timeRemaining = TimeSpan.FromMinutes(5); // Timer inicial de 5 minutos
  private string? selectedSector; // Setor selecionado
  private bool isConfigModalVisible = false;
  private bool startCheck = false;
  
  private bool isUpdating = false;
  
  /*GRAFIC VARIABLES AND FUNCTIONS*/
    private List<string> setores = new List<string>();
    private double[] mediasHoras = new double[0];
    private bool ischartModalVisible = false;
    private int selectedIndex = -1;

    // Dados de teste para os protocolos (substitua pelos seus dados reais)
    private List<ProtocolData> protocolos = new List<ProtocolData>(); 

    // Função para abrir o modal e preparar os dados do gráfico
    void OpenModal()
    {
        PrepareChartData(protocolos); // Prepara os dados
        setores = chartData.Select(c => c.Setor).ToList();
        mediasHoras = chartData.Select(c => c.AverageHours).ToArray();
        ischartModalVisible = true;
    }

    // Função para fechar o modal
    void CloseModal()
    {
        ischartModalVisible = false;
    }

    // Função que prepara os dados para o gráfico
    public void PrepareChartData(List<ProtocolData> protocolos)
    {
        var mediaHorasPorSetor = CalcularMediaHorasPorSetor(protocolos);
        chartData = mediaHorasPorSetor.Select(kvp => new ChartData
        {
            Setor = kvp.Key,
            AverageHours = kvp.Value
        }).ToList();
    }

    // A sua classe ChartData já definida
    public class ChartData
    {
        public string? Setor { get; set; }
        public double AverageHours { get; set; }
    }

    // A lista que contém os dados do gráfico
    private List<ChartData> chartData = new List<ChartData>();

    // A função que calcula a média das horas por setor (já implementada)
    public Dictionary<string, double> CalcularMediaHorasPorSetor(List<ProtocolData> protocolos)
    {
        var setorTimeData = new Dictionary<string, SectorTimeData>();

        foreach (var protocolo in protocolos)
        {
            var movimentos = protocolo.Moves;

            for (int i = 1; i < movimentos.Count; i++) // Começa do segundo movimento
            {
                var movimentoAnterior = movimentos[i - 1];
                var movimentoAtual = movimentos[i];

                if (!string.IsNullOrEmpty(movimentoAnterior.Data) && !string.IsNullOrEmpty(movimentoAtual.Data))
                {
                    DateTime dataAnterior = DateTime.Parse(movimentoAnterior.Data);
                    DateTime dataAtual = DateTime.Parse(movimentoAtual.Data);

                    TimeSpan diff = dataAtual - dataAnterior;
                    string setor = movimentoAnterior.SetorDestino ?? "Sem setor";

                    if (!setorTimeData.ContainsKey(setor))
                    {
                        setorTimeData[setor] = new SectorTimeData { Setor = setor, TotalHours = 0, Occurrences = 0 };
                    }

                    setorTimeData[setor].TotalHours += diff.TotalHours;
                    setorTimeData[setor].Occurrences++;
                }
            }
        }

        // Retorna a média de horas por setor
        return setorTimeData.ToDictionary(data => data.Key, data => data.Value.AverageHours());
    }

    public class SectorTimeData
    {
        public string Setor { get; set; }
        public double TotalHours { get; set; }
        public int Occurrences { get; set; }

        public double AverageHours()
        {
            return Occurrences > 0 ? TotalHours / Occurrences : 0;
        }
    }
    /*GRAFIC VARIABLES AND FUNCTIONS*/
  
  
  // Nova instância da classe ByTimeColorConfig
  private ByTimeColorConfig colorConfig = new ByTimeColorConfig();
  
  private System.Timers.Timer timer; // Timer do sistema
  
  private async Task UpdateProtocols()
  {
    // Verifica se miniprotocols é nulo ou está vazio
    if (miniprotocols != null && miniprotocols.Any())
    {
      List<string> listaProtocolosPesquisar = miniprotocols.Select(mp => mp.Numero).ToList();
      await UpdateGridWithFullProtocolsAsync(listaProtocolosPesquisar);
    }
    else
    {
      // Corrigido para usar Console.WriteLine
      Console.WriteLine("Ocorreu um erro ao tentar listar os números dos mini protocolos");
    }
  }

  private async Task  UpdateProtocolsMoves(List<ProtocolData> protocols)
  {
    // Indica que a requisição de protocolos está ativa
    isUpdating = true;
    ProtocolRequestStatus = true;
    isLoading = true;
    receivedMessage = null;
    StateHasChanged();

    // Cria uma lista de números de protocolos a serem enviados
    var protocolList = protocols.Select(p => p.Header.Numero).ToList();

      var lastMovesTimeList = protocols.Select(p => {
      var lastMove = p.Moves.LastOrDefault()?.Hora ?? "Sem hora";
      return string.IsNullOrEmpty(lastMove) ? "Sem hora" : lastMove;
    }).ToList();

    // Cria a string de horas separadas por vírgulas
    var lastMovesTime = string.Join(",", lastMovesTimeList);

    // Envia a lista de protocolos e a lista de últimas horas para o backend
    await WebSocketService.SendAsync("CheckForProtocolUpdate" + ' ' + string.Join(",", protocolList) + " " + lastMovesTime);
      
    // Aguarda a resposta do backend para saber quantos protocolos serão atualizados
    string response = await WebSocketService.ReceiveAsync();
   
    if (int.TryParse(response, out int totalProtocols)  && totalProtocols > 0)
    {
      // Variável para controlar quantos protocolos foram processados
      int processedProtocols = 0;

      // Continua recebendo mensagens até que todas as respostas tenham sido recebidas
      while (processedProtocols < totalProtocols)
      {
        receivedMessage = await WebSocketService.ReceiveAsync();

        if (!string.IsNullOrEmpty(receivedMessage))
        {
          Console.WriteLine($"Dados do protocolo {processedProtocols + 1} de {totalProtocols} recebidos do backend Node");

          // Cria uma nova instância de ProtocolData para cada novo protocolo recebido
          var newProtocolInstance = new ProtocolData();
          ProtocolLoader.PD_FromJson(receivedMessage, ref newProtocolInstance);
          ProtocolLoader.IdentifySponsor(ref newProtocolInstance);

          // Substitui o protocolo existente, se houver
          var existingProtocol = protocols.FirstOrDefault(p => p.Header.Numero == newProtocolInstance.Header.Numero);
          if (existingProtocol != null)
          {
            // Remove o protocolo antigo
            protocols.Remove(existingProtocol);
          }

          // Adiciona o novo protocolo
          protocols.Add(newProtocolInstance);
          
          // Atualiza o Local Storage com a lista atualizada de protocolos
          await localStorage.SetItemAsync("protocols", protocols); // Salva a lista no Local Storage

          // Atualiza a interface de usuário a cada nova mensagem recebida
          StateHasChanged();

          // Incrementa a quantidade de protocolos processados
          processedProtocols++;
        }
      }
    }else if (int.TryParse(response, out int totalProtocolss)  && totalProtocolss <= 0)
    {
      Console.WriteLine("Não há Protocolos para serem atualizados");
    }
  
    // Certifique-se de que o estado de carregamento seja encerrado
    
    isLoading = false;
    ProtocolRequestStatus = false;
    StateHasChanged();
    isUpdating = false;
  }

  private async Task StartTimer()
  {
    while (timeRemaining.TotalSeconds > 0)
    {
      await Task.Delay(1000); // Espera 1 segundo
      timeRemaining = timeRemaining.Subtract(TimeSpan.FromSeconds(1));
      StateHasChanged();
    }
    
    if(isUpdating == false && isLoading == false && protocols.Any()){
     // Quando o tempo acabar, realize a pesquisa de mini protocolos
      await UpdateProtocolsMoves(protocols);
    }else{
      Console.WriteLine("Os protoclos estão sendo atualizados, não realizar aa tualização periódica agora");
      
    }
   
    
    // Reinicie o timer para 5 minutos
    timeRemaining = TimeSpan.FromMinutes(5);
    StateHasChanged();
    StartTimer();
    Console.WriteLine("Timer iniciado novamente");
  }

  private void OnSectorChange(string sector)
  {
    selectedSector = sector; // Armazena o setor selecionado
  }
  
  private void ShowConfigModal()
  {
    isConfigModalVisible = true;
    StateHasChanged();
  }

  private void HideConfigModal()
  {
    isConfigModalVisible = false;
    StateHasChanged();
  }

  private async void SaveConfigurations()
  {
    // Salve a instância da classe ByTimeColorConfig no Local Storage
    await localStorage.SetItemAsync("colorConfig", colorConfig);

    // Atualize a expectativa de movimentação com base na configuração salva
    expectativaMovimentacao = DateTime.Now.AddDays(colorConfig.ConfigExpectativaMovimentacao ?? 0);
    HideConfigModal();
  }
  
   private async Task LimparProtocolos()
    {
        // Remove as chaves 'protocols' e 'miniprotocols' do local storage
        await localStorage.RemoveItemAsync("protocols");
        await localStorage.RemoveItemAsync("miniprotocols");
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
    }

  private async Task ConnectWebSocket() {
    await WebSocketService.ConnectAsync();
  }

  private async Task RequestProtocolData() {
    ProtocolRequestStatus = true;
    isLoading = true;
    receivedMessage = null;
    StateHasChanged();
  
    await WebSocketService.SendAsync("ProtocolScrape " + userInput);
    receivedMessage = await WebSocketService.ReceiveAsync();
  
    if (!string.IsNullOrEmpty(receivedMessage)) {
      Console.WriteLine("Dados de protocolo enviado - Mensagem Recebida do Back-end Node");
  
      // Crie uma nova instância de ProtocolData para cada novo protocolo recebido
      var newProtocolInstance = new ProtocolData();
      ProtocolLoader.PD_FromJson(receivedMessage, ref newProtocolInstance);
      ProtocolLoader.IdentifySponsor(ref newProtocolInstance);
      // Verifique se o protocolo já existe antes de adicionar
      if (!protocols.Any(p => p.Header.Numero == newProtocolInstance.Header.Numero)) {
        protocols.Add(newProtocolInstance);
        AtualizarListaMiniProtocolos(ref protocols, ref miniprotocols);
        StateHasChanged();
        await localStorage.SetItemAsync("protocols", protocols); // Salve a lista no Local Storage
      }
    }
  
    isLoading = false; // Certifique-se de que o estado de carregamento seja encerrado
    StateHasChanged();
  }

  public void AtualizarListaMiniProtocolos(ref List<ProtocolData> listaProtocolos, ref List<MiniProtocolData> listaMiniProtocolos)
  {
    // Para cada protocolo completo
    foreach (var protocolo in listaProtocolos)
    {
        // Encontra o miniprotocolo correspondente, se existir
        var miniProtocoloCorrespondente = listaMiniProtocolos
            .FirstOrDefault(mini => mini.Numero == protocolo.Header.Numero);

        // Se houver correspondência, remove o miniprotocolo
        if (miniProtocoloCorrespondente != null)
        {
            listaMiniProtocolos.Remove(miniProtocoloCorrespondente);
            AtualizarLocalStorage(listaMiniProtocolos);
            StateHasChanged();
        }
    }
  }

  private async Task UpdateGridWithFullProtocolsAsync(List<string> protocolList){
    ProtocolRequestStatus = true;
    isLoading = true;
    receivedMessage = null;
    StateHasChanged();

    // Envia a lista de protocolos para o backend
    await WebSocketService.SendAsync("UpdateGridWithFullProtocols " + string.Join(",", protocolList));

    // Variável para controlar quantos protocolos foram processados
    int processedProtocols = 0;
    int totalProtocols = protocolList.Count;

    // Continua recebendo mensagens até que todas as respostas tenham sido recebidas
    while (processedProtocols < totalProtocols) {
      receivedMessage = await WebSocketService.ReceiveAsync();

      if (!string.IsNullOrEmpty(receivedMessage)) {
        Console.WriteLine($"Dados do protocolo {processedProtocols + 1} de {totalProtocols} recebidos do backend Node");

        // Cria uma nova instância de ProtocolData para cada novo protocolo recebido
        var newProtocolInstance = new ProtocolData();
        ProtocolLoader.PD_FromJson(receivedMessage, ref newProtocolInstance);
        ProtocolLoader.IdentifySponsor(ref newProtocolInstance);
        // Verifica se o protocolo já existe antes de adicionar
        if (!protocols.Any(p => p.Header.Numero == newProtocolInstance.Header.Numero)) {
          protocols.Add(newProtocolInstance);
          AtualizarListaMiniProtocolos(ref protocols, ref miniprotocols);
          StateHasChanged();
          await localStorage.SetItemAsync("protocols", protocols); // Salva a lista no Local Storage
        }

        // Atualiza a interface de usuário a cada nova mensagem recebida
        StateHasChanged();

        // Incrementa a quantidade de protocolos processados
        processedProtocols++;
      }
    }

    isLoading = false; // Certifique-se de que o estado de carregamento seja encerrado
    ProtocolRequestStatus = false;
    StateHasChanged();
    Console.WriteLine("Todos os MiniProtocolos foram subistituídos por Protocolos completos, iniciando Timer para atualizações periódicas");
    if(isUpdating == false){
    await StartTimer();
    }
    
  }
  
  private async Task BySectorRequestMiniProtocolData(string sector) {
    ProtocolRequestStatus = true;
    isLoading = true;
    receivedMessage = null;
    StateHasChanged();
  
    await WebSocketService.SendAsync("BySectorMiniProtocolsScrape " + sector);
    receivedMessage = await WebSocketService.ReceiveAsync();
  
    if (!string.IsNullOrEmpty(receivedMessage)) {
      Console.WriteLine(" Resultado da busca por miniprotocolos, enviada - Mensagem Recebida do Back-end Node");
  
      // Crie uma nova instância de ProtocolData para cada novo protocolo recebido
      var newMiniProtocolList = new List<MiniProtocolData>();
      ProtocolLoader.MiniPD_FromJson(receivedMessage, ref newMiniProtocolList);
  
      // Verifique se o protocolo já existe antes de adicionar
      foreach(MiniProtocolData miniProtocol in newMiniProtocolList){
        if (!miniprotocols.Any(p => p.Numero == miniProtocol.Numero)) {
        miniprotocols.Add(miniProtocol);
        // Salve a lista no Local Storage
      }
    }
    await localStorage.SetItemAsync("miniprotocols", miniprotocols); 
  }

  isLoading = false; // Certifique-se de que o estado de carregamento seja encerrado
  await UpdateProtocols();
  StateHasChanged();
  }

  private async Task TryConnectWebSocket() {
    while (!isConnected) {
      isConnecting = true; // Mostrar loader
      StateHasChanged();
      try {
        await ConnectWebSocket();
        isConnected = true; // Definir como conectado
        isConnecting = false; // Remover loader
        await ShowConnectionMessage(); // Mostrar a mensagem de conexão
      } catch (Exception) {
        // Se falhar, espere um pouco antes de tentar novamente
        await Task.Delay(2000);
      }
    }
  }

  private async Task ShowConnectionMessage() {
    await Task.Delay(500); // Esperar um pouco antes de mostrar a mensagem
    hasConnectionMessageDisappeared = false;
    StateHasChanged();
    await Task.Delay(2000); // Tempo da mensagem de conexão
    hasConnectionMessageDisappeared = true;
    StateHasChanged();
  }

  protected override async Task OnInitializedAsync() {
    
    var savedProtocols = await localStorage.GetItemAsync<List<ProtocolData>>("protocols");
    if(savedProtocols != null){
      protocols = savedProtocols;
    }
    
    var savedMiniProtocols = await localStorage.GetItemAsync<List<MiniProtocolData>>("miniprotocols");
    if (savedMiniProtocols != null) {
      miniprotocols = savedMiniProtocols; // Carregue protocolos salvos
    }
    
    var savedConfig = await localStorage.GetItemAsync<ByTimeColorConfig>("colorConfig");
    if (savedConfig != null)
    {
      colorConfig = savedConfig;
      expectativaMovimentacao = DateTime.Now.AddDays(colorConfig.ConfigExpectativaMovimentacao ?? 0);
    }
    
    await TryConnectWebSocket();
    
   
    await UpdateProtocols();
    
    StartTimer();
    
    
    
    
  }

  private async Task AtualizarLocalStorage(List<MiniProtocolData> listaMiniProtocolos){
  await localStorage.SetItemAsync("miniprotocols", miniprotocols); 
  }


}
